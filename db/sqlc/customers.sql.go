// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.29.0
// source: customers.sql

package db

import (
	"context"
	"database/sql"
)

const createCustomer = `-- name: CreateCustomer :one
INSERT INTO customers (
    name,
    accounts_id,
    email
) VALUES (
    $1, $2, $3
)
RETURNING id, name, accounts_id, email, created_at
`

type CreateCustomerParams struct {
	Name       string        `json:"name"`
	AccountsID sql.NullInt32 `json:"accounts_id"`
	Email      string        `json:"email"`
}

func (q *Queries) CreateCustomer(ctx context.Context, arg CreateCustomerParams) (Customer, error) {
	row := q.db.QueryRowContext(ctx, createCustomer, arg.Name, arg.AccountsID, arg.Email)
	var i Customer
	err := row.Scan(
		&i.ID,
		&i.Name,
		&i.AccountsID,
		&i.Email,
		&i.CreatedAt,
	)
	return i, err
}

const deleteCustomer = `-- name: DeleteCustomer :exec
DELETE FROM customers
WHERE id = $1
`

func (q *Queries) DeleteCustomer(ctx context.Context, id int64) error {
	_, err := q.db.ExecContext(ctx, deleteCustomer, id)
	return err
}

const getCustomer = `-- name: GetCustomer :one
SELECT id, name, accounts_id, email, created_at FROM customers
WHERE id = $1
`

func (q *Queries) GetCustomer(ctx context.Context, id int64) (Customer, error) {
	row := q.db.QueryRowContext(ctx, getCustomer, id)
	var i Customer
	err := row.Scan(
		&i.ID,
		&i.Name,
		&i.AccountsID,
		&i.Email,
		&i.CreatedAt,
	)
	return i, err
}

const getCustomerIDByUsername = `-- name: GetCustomerIDByUsername :one
SELECT
  cu.id
FROM
  customers AS cu
JOIN
  accounts AS ac ON cu.accounts_id = ac.id
WHERE
  ac.username = $1
`

func (q *Queries) GetCustomerIDByUsername(ctx context.Context, username string) (int64, error) {
	row := q.db.QueryRowContext(ctx, getCustomerIDByUsername, username)
	var id int64
	err := row.Scan(&id)
	return id, err
}

const listCustomers = `-- name: ListCustomers :many
SELECT id, name, accounts_id, email, created_at FROM customers
ORDER BY id
LIMIT $1 OFFSET $2
`

type ListCustomersParams struct {
	Limit  int32 `json:"limit"`
	Offset int32 `json:"offset"`
}

func (q *Queries) ListCustomers(ctx context.Context, arg ListCustomersParams) ([]Customer, error) {
	rows, err := q.db.QueryContext(ctx, listCustomers, arg.Limit, arg.Offset)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []Customer{}
	for rows.Next() {
		var i Customer
		if err := rows.Scan(
			&i.ID,
			&i.Name,
			&i.AccountsID,
			&i.Email,
			&i.CreatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const updateCustomer = `-- name: UpdateCustomer :one
UPDATE customers
SET
    name = $2,
    email = $3
WHERE id = $1
RETURNING id, name, accounts_id, email, created_at
`

type UpdateCustomerParams struct {
	ID    int64  `json:"id"`
	Name  string `json:"name"`
	Email string `json:"email"`
}

func (q *Queries) UpdateCustomer(ctx context.Context, arg UpdateCustomerParams) (Customer, error) {
	row := q.db.QueryRowContext(ctx, updateCustomer, arg.ID, arg.Name, arg.Email)
	var i Customer
	err := row.Scan(
		&i.ID,
		&i.Name,
		&i.AccountsID,
		&i.Email,
		&i.CreatedAt,
	)
	return i, err
}
