// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.29.0
// source: cart_items.sql

package db

import (
	"context"
	"time"
)

const createCartItem = `-- name: CreateCartItem :one
INSERT INTO cart_items (
  quantity,
  account_id,
  product_id,
  created_at
) VALUES (
  $1, $2, $3, $4
)
RETURNING id, account_id, product_id, quantity, created_at, updated_at
`

type CreateCartItemParams struct {
	Quantity  int32     `json:"quantity"`
	AccountID int64     `json:"account_id"`
	ProductID int64     `json:"product_id"`
	CreatedAt time.Time `json:"created_at"`
}

func (q *Queries) CreateCartItem(ctx context.Context, arg CreateCartItemParams) (CartItem, error) {
	row := q.db.QueryRowContext(ctx, createCartItem,
		arg.Quantity,
		arg.AccountID,
		arg.ProductID,
		arg.CreatedAt,
	)
	var i CartItem
	err := row.Scan(
		&i.ID,
		&i.AccountID,
		&i.ProductID,
		&i.Quantity,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const deleteCartItem = `-- name: DeleteCartItem :exec
DELETE FROM cart_items WHERE id = $1
`

func (q *Queries) DeleteCartItem(ctx context.Context, id int64) error {
	_, err := q.db.ExecContext(ctx, deleteCartItem, id)
	return err
}

const getAccountIDByCartItemID = `-- name: GetAccountIDByCartItemID :one
SELECT account_id FROM cart_items WHERE id = $1
`

func (q *Queries) GetAccountIDByCartItemID(ctx context.Context, id int64) (int64, error) {
	row := q.db.QueryRowContext(ctx, getAccountIDByCartItemID, id)
	var account_id int64
	err := row.Scan(&account_id)
	return account_id, err
}

const getCartItem = `-- name: GetCartItem :one
SELECT id, account_id, product_id, quantity, created_at, updated_at FROM cart_items WHERE id = $1
`

func (q *Queries) GetCartItem(ctx context.Context, id int64) (CartItem, error) {
	row := q.db.QueryRowContext(ctx, getCartItem, id)
	var i CartItem
	err := row.Scan(
		&i.ID,
		&i.AccountID,
		&i.ProductID,
		&i.Quantity,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const listCartItemsByAccountID = `-- name: ListCartItemsByAccountID :many
SELECT
  p.name AS product_name,
  c.id,
  c.quantity
FROM
  cart_items AS c
JOIN
  products AS p ON c.product_id = p.id
WHERE
  c.account_id = $1
ORDER BY
  c.id
LIMIT $2 OFFSET $3
`

type ListCartItemsByAccountIDParams struct {
	AccountID int64 `json:"account_id"`
	Limit     int32 `json:"limit"`
	Offset    int32 `json:"offset"`
}

type ListCartItemsByAccountIDRow struct {
	ProductName string `json:"product_name"`
	ID          int64  `json:"id"`
	Quantity    int32  `json:"quantity"`
}

func (q *Queries) ListCartItemsByAccountID(ctx context.Context, arg ListCartItemsByAccountIDParams) ([]ListCartItemsByAccountIDRow, error) {
	rows, err := q.db.QueryContext(ctx, listCartItemsByAccountID, arg.AccountID, arg.Limit, arg.Offset)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []ListCartItemsByAccountIDRow{}
	for rows.Next() {
		var i ListCartItemsByAccountIDRow
		if err := rows.Scan(&i.ProductName, &i.ID, &i.Quantity); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const updateCartItemQuantity = `-- name: UpdateCartItemQuantity :one
UPDATE cart_items
SET quantity = $2
WHERE id = $1
RETURNING id, account_id, product_id, quantity, created_at, updated_at
`

type UpdateCartItemQuantityParams struct {
	ID       int64 `json:"id"`
	Quantity int32 `json:"quantity"`
}

func (q *Queries) UpdateCartItemQuantity(ctx context.Context, arg UpdateCartItemQuantityParams) (CartItem, error) {
	row := q.db.QueryRowContext(ctx, updateCartItemQuantity, arg.ID, arg.Quantity)
	var i CartItem
	err := row.Scan(
		&i.ID,
		&i.AccountID,
		&i.ProductID,
		&i.Quantity,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}
