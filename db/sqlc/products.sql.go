// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.29.0
// source: products.sql

package db

import (
	"context"
	"database/sql"
)

const createProduct = `-- name: CreateProduct :one
INSERT INTO products (name, price, category_id, value)
VALUES ($1, $2, $3, $4)
RETURNING id, name, price, category_id, value, created_at
`

type CreateProductParams struct {
	Name       string        `json:"name"`
	Price      int32         `json:"price"`
	CategoryID sql.NullInt32 `json:"category_id"`
	Value      int32         `json:"value"`
}

func (q *Queries) CreateProduct(ctx context.Context, arg CreateProductParams) (Product, error) {
	row := q.db.QueryRowContext(ctx, createProduct,
		arg.Name,
		arg.Price,
		arg.CategoryID,
		arg.Value,
	)
	var i Product
	err := row.Scan(
		&i.ID,
		&i.Name,
		&i.Price,
		&i.CategoryID,
		&i.Value,
		&i.CreatedAt,
	)
	return i, err
}

const deleteProduct = `-- name: DeleteProduct :exec
DELETE FROM products WHERE id = $1
`

func (q *Queries) DeleteProduct(ctx context.Context, id int64) error {
	_, err := q.db.ExecContext(ctx, deleteProduct, id)
	return err
}

const getProduct = `-- name: GetProduct :one
SELECT
  p.id,
  p.name,
  p.price,
  c.name AS category_name,
  c.type AS category_type,
  p.value
FROM
  products AS p
JOIN
  categories AS c ON p.category_id = c.id
WHERE
  p.id = $1
`

type GetProductRow struct {
	ID           int64  `json:"id"`
	Name         string `json:"name"`
	Price        int32  `json:"price"`
	CategoryName string `json:"category_name"`
	CategoryType string `json:"category_type"`
	Value        int32  `json:"value"`
}

func (q *Queries) GetProduct(ctx context.Context, id int64) (GetProductRow, error) {
	row := q.db.QueryRowContext(ctx, getProduct, id)
	var i GetProductRow
	err := row.Scan(
		&i.ID,
		&i.Name,
		&i.Price,
		&i.CategoryName,
		&i.CategoryType,
		&i.Value,
	)
	return i, err
}

const listProducts = `-- name: ListProducts :many
SELECT id, name, price, category_id, value, created_at FROM products
ORDER BY id
`

func (q *Queries) ListProducts(ctx context.Context) ([]Product, error) {
	rows, err := q.db.QueryContext(ctx, listProducts)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []Product{}
	for rows.Next() {
		var i Product
		if err := rows.Scan(
			&i.ID,
			&i.Name,
			&i.Price,
			&i.CategoryID,
			&i.Value,
			&i.CreatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const listProductsByCategoryID = `-- name: ListProductsByCategoryID :many
SELECT
  p.id,
  p.name,
  p.price,
  p.category_id,
  p.value,
  p.created_at
FROM
  products AS p
WHERE
  p.category_id = $1
ORDER BY p.id
`

func (q *Queries) ListProductsByCategoryID(ctx context.Context, categoryID sql.NullInt32) ([]Product, error) {
	rows, err := q.db.QueryContext(ctx, listProductsByCategoryID, categoryID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []Product{}
	for rows.Next() {
		var i Product
		if err := rows.Scan(
			&i.ID,
			&i.Name,
			&i.Price,
			&i.CategoryID,
			&i.Value,
			&i.CreatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const updateProduct = `-- name: UpdateProduct :one
UPDATE products
SET name = $2, price = $3, category_id = $4, value = $5
WHERE id = $1
RETURNING id, name, price, category_id, value, created_at
`

type UpdateProductParams struct {
	ID         int64         `json:"id"`
	Name       string        `json:"name"`
	Price      int32         `json:"price"`
	CategoryID sql.NullInt32 `json:"category_id"`
	Value      int32         `json:"value"`
}

func (q *Queries) UpdateProduct(ctx context.Context, arg UpdateProductParams) (Product, error) {
	row := q.db.QueryRowContext(ctx, updateProduct,
		arg.ID,
		arg.Name,
		arg.Price,
		arg.CategoryID,
		arg.Value,
	)
	var i Product
	err := row.Scan(
		&i.ID,
		&i.Name,
		&i.Price,
		&i.CategoryID,
		&i.Value,
		&i.CreatedAt,
	)
	return i, err
}
