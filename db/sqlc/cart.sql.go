// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.29.0
// source: cart.sql

package db

import (
	"context"
	"time"
)

const createCart = `-- name: CreateCart :one
INSERT INTO cart (
  value,
  account_id,
  product_id,
  created_at
) VALUES (
  $1, $2, $3, $4
)
RETURNING id, value, account_id, product_id, created_at
`

type CreateCartParams struct {
	Value     int32     `json:"value"`
	AccountID int32     `json:"account_id"`
	ProductID int32     `json:"product_id"`
	CreatedAt time.Time `json:"created_at"`
}

func (q *Queries) CreateCart(ctx context.Context, arg CreateCartParams) (Cart, error) {
	row := q.db.QueryRowContext(ctx, createCart,
		arg.Value,
		arg.AccountID,
		arg.ProductID,
		arg.CreatedAt,
	)
	var i Cart
	err := row.Scan(
		&i.ID,
		&i.Value,
		&i.AccountID,
		&i.ProductID,
		&i.CreatedAt,
	)
	return i, err
}

const deleteCart = `-- name: DeleteCart :exec
DELETE FROM cart
WHERE id = $1
`

func (q *Queries) DeleteCart(ctx context.Context, id int64) error {
	_, err := q.db.ExecContext(ctx, deleteCart, id)
	return err
}

const getCart = `-- name: GetCart :one
SELECT id, value, account_id, product_id, created_at FROM cart
WHERE id = $1
`

func (q *Queries) GetCart(ctx context.Context, id int64) (Cart, error) {
	row := q.db.QueryRowContext(ctx, getCart, id)
	var i Cart
	err := row.Scan(
		&i.ID,
		&i.Value,
		&i.AccountID,
		&i.ProductID,
		&i.CreatedAt,
	)
	return i, err
}

const listCarts = `-- name: ListCarts :many
SELECT id, value, account_id, product_id, created_at FROM cart
ORDER BY id
LIMIT $1 OFFSET $2
`

type ListCartsParams struct {
	Limit  int32 `json:"limit"`
	Offset int32 `json:"offset"`
}

func (q *Queries) ListCarts(ctx context.Context, arg ListCartsParams) ([]Cart, error) {
	rows, err := q.db.QueryContext(ctx, listCarts, arg.Limit, arg.Offset)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []Cart{}
	for rows.Next() {
		var i Cart
		if err := rows.Scan(
			&i.ID,
			&i.Value,
			&i.AccountID,
			&i.ProductID,
			&i.CreatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const updateCartValue = `-- name: UpdateCartValue :one
UPDATE cart
SET
  value = $2
WHERE id = $1
RETURNING id, value, account_id, product_id, created_at
`

type UpdateCartValueParams struct {
	ID    int64 `json:"id"`
	Value int32 `json:"value"`
}

func (q *Queries) UpdateCartValue(ctx context.Context, arg UpdateCartValueParams) (Cart, error) {
	row := q.db.QueryRowContext(ctx, updateCartValue, arg.ID, arg.Value)
	var i Cart
	err := row.Scan(
		&i.ID,
		&i.Value,
		&i.AccountID,
		&i.ProductID,
		&i.CreatedAt,
	)
	return i, err
}
