// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.29.0
// source: shipments.sql

package db

import (
	"context"
	"time"
)

const createShipment = `-- name: CreateShipment :one
INSERT INTO shipments (order_id, shipment_code, fee, status, created_at, updated_at)
VALUES ($1, $2, $3, $4, $5, $6) RETURNING id, order_id, shipment_code, fee, status, created_at, updated_at
`

type CreateShipmentParams struct {
	OrderID      int64     `json:"order_id"`
	ShipmentCode string    `json:"shipment_code"`
	Fee          int64     `json:"fee"`
	Status       string    `json:"status"`
	CreatedAt    time.Time `json:"created_at"`
	UpdatedAt    time.Time `json:"updated_at"`
}

func (q *Queries) CreateShipment(ctx context.Context, arg CreateShipmentParams) (Shipment, error) {
	row := q.db.QueryRowContext(ctx, createShipment,
		arg.OrderID,
		arg.ShipmentCode,
		arg.Fee,
		arg.Status,
		arg.CreatedAt,
		arg.UpdatedAt,
	)
	var i Shipment
	err := row.Scan(
		&i.ID,
		&i.OrderID,
		&i.ShipmentCode,
		&i.Fee,
		&i.Status,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const deleteShipment = `-- name: DeleteShipment :exec
DELETE FROM shipments WHERE id = $1
`

func (q *Queries) DeleteShipment(ctx context.Context, id int64) error {
	_, err := q.db.ExecContext(ctx, deleteShipment, id)
	return err
}

const getShipment = `-- name: GetShipment :one
SELECT id, order_id, shipment_code, fee, status, created_at, updated_at FROM shipments WHERE id = $1
`

func (q *Queries) GetShipment(ctx context.Context, id int64) (Shipment, error) {
	row := q.db.QueryRowContext(ctx, getShipment, id)
	var i Shipment
	err := row.Scan(
		&i.ID,
		&i.OrderID,
		&i.ShipmentCode,
		&i.Fee,
		&i.Status,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const listShipments = `-- name: ListShipments :many
SELECT id, order_id, shipment_code, fee, status, created_at, updated_at FROM shipments ORDER BY id LIMIT $1 OFFSET $2
`

type ListShipmentsParams struct {
	Limit  int32 `json:"limit"`
	Offset int32 `json:"offset"`
}

func (q *Queries) ListShipments(ctx context.Context, arg ListShipmentsParams) ([]Shipment, error) {
	rows, err := q.db.QueryContext(ctx, listShipments, arg.Limit, arg.Offset)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []Shipment{}
	for rows.Next() {
		var i Shipment
		if err := rows.Scan(
			&i.ID,
			&i.OrderID,
			&i.ShipmentCode,
			&i.Fee,
			&i.Status,
			&i.CreatedAt,
			&i.UpdatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const updateShipmentStatus = `-- name: UpdateShipmentStatus :one
UPDATE shipments SET status = $2, updated_at = $3 WHERE id = $1 RETURNING id, order_id, shipment_code, fee, status, created_at, updated_at
`

type UpdateShipmentStatusParams struct {
	ID        int64     `json:"id"`
	Status    string    `json:"status"`
	UpdatedAt time.Time `json:"updated_at"`
}

func (q *Queries) UpdateShipmentStatus(ctx context.Context, arg UpdateShipmentStatusParams) (Shipment, error) {
	row := q.db.QueryRowContext(ctx, updateShipmentStatus, arg.ID, arg.Status, arg.UpdatedAt)
	var i Shipment
	err := row.Scan(
		&i.ID,
		&i.OrderID,
		&i.ShipmentCode,
		&i.Fee,
		&i.Status,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}
