// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.29.0
// source: account_info.sql

package db

import (
	"context"
	"time"
)

const checkEmailExists = `-- name: CheckEmailExists :one
SELECT EXISTS (
  SELECT 1 FROM account_info WHERE email = $1
) AS exists
`

func (q *Queries) CheckEmailExists(ctx context.Context, email string) (bool, error) {
	row := q.db.QueryRowContext(ctx, checkEmailExists, email)
	var exists bool
	err := row.Scan(&exists)
	return exists, err
}

const createAccountInfo = `-- name: CreateAccountInfo :one
INSERT INTO account_info (
  name,
  email,
  phone_number,
  address,
  account_id,
  created_at,
  updated_at
) VALUES (
  $1, $2, $3, $4, $5, $6, $7
) RETURNING id, account_id, name, email, phone_number, address, created_at, updated_at
`

type CreateAccountInfoParams struct {
	Name        string    `json:"name"`
	Email       string    `json:"email"`
	PhoneNumber string    `json:"phone_number"`
	Address     string    `json:"address"`
	AccountID   int64     `json:"account_id"`
	CreatedAt   time.Time `json:"created_at"`
	UpdatedAt   time.Time `json:"updated_at"`
}

func (q *Queries) CreateAccountInfo(ctx context.Context, arg CreateAccountInfoParams) (AccountInfo, error) {
	row := q.db.QueryRowContext(ctx, createAccountInfo,
		arg.Name,
		arg.Email,
		arg.PhoneNumber,
		arg.Address,
		arg.AccountID,
		arg.CreatedAt,
		arg.UpdatedAt,
	)
	var i AccountInfo
	err := row.Scan(
		&i.ID,
		&i.AccountID,
		&i.Name,
		&i.Email,
		&i.PhoneNumber,
		&i.Address,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const getAccountID = `-- name: GetAccountID :one
SELECT account_id FROM account_info WHERE id = $1
`

func (q *Queries) GetAccountID(ctx context.Context, id int64) (int64, error) {
	row := q.db.QueryRowContext(ctx, getAccountID, id)
	var account_id int64
	err := row.Scan(&account_id)
	return account_id, err
}

const getAccountIDByEmail = `-- name: GetAccountIDByEmail :one
SELECT account_id FROM account_info WHERE email =$1
`

func (q *Queries) GetAccountIDByEmail(ctx context.Context, email string) (int64, error) {
	row := q.db.QueryRowContext(ctx, getAccountIDByEmail, email)
	var account_id int64
	err := row.Scan(&account_id)
	return account_id, err
}

const getAccountInfo = `-- name: GetAccountInfo :one
SELECT id, account_id, name, email, phone_number, address, created_at, updated_at FROM account_info WHERE id = $1
`

func (q *Queries) GetAccountInfo(ctx context.Context, id int64) (AccountInfo, error) {
	row := q.db.QueryRowContext(ctx, getAccountInfo, id)
	var i AccountInfo
	err := row.Scan(
		&i.ID,
		&i.AccountID,
		&i.Name,
		&i.Email,
		&i.PhoneNumber,
		&i.Address,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const getAccountInfoByAccountID = `-- name: GetAccountInfoByAccountID :one
SELECT id, account_id, name, email, phone_number, address, created_at, updated_at FROM account_info WHERE account_id = $1
`

func (q *Queries) GetAccountInfoByAccountID(ctx context.Context, accountID int64) (AccountInfo, error) {
	row := q.db.QueryRowContext(ctx, getAccountInfoByAccountID, accountID)
	var i AccountInfo
	err := row.Scan(
		&i.ID,
		&i.AccountID,
		&i.Name,
		&i.Email,
		&i.PhoneNumber,
		&i.Address,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const getAddressForShipment = `-- name: GetAddressForShipment :one
SELECT address FROM account_info WHERE account_id = $1
`

func (q *Queries) GetAddressForShipment(ctx context.Context, accountID int64) (string, error) {
	row := q.db.QueryRowContext(ctx, getAddressForShipment, accountID)
	var address string
	err := row.Scan(&address)
	return address, err
}

const getNameForShipment = `-- name: GetNameForShipment :one
SELECT name FROM account_info WHERE account_id = $1
`

func (q *Queries) GetNameForShipment(ctx context.Context, accountID int64) (string, error) {
	row := q.db.QueryRowContext(ctx, getNameForShipment, accountID)
	var name string
	err := row.Scan(&name)
	return name, err
}

const getPhoneForShipment = `-- name: GetPhoneForShipment :one
SELECT phone_number FROM account_info WHERE account_id = $1
`

func (q *Queries) GetPhoneForShipment(ctx context.Context, accountID int64) (string, error) {
	row := q.db.QueryRowContext(ctx, getPhoneForShipment, accountID)
	var phone_number string
	err := row.Scan(&phone_number)
	return phone_number, err
}

const listAccountInfos = `-- name: ListAccountInfos :many
SELECT id, account_id, name, email, phone_number, address, created_at, updated_at FROM account_info ORDER BY id LIMIT $1 OFFSET $2
`

type ListAccountInfosParams struct {
	Limit  int32 `json:"limit"`
	Offset int32 `json:"offset"`
}

func (q *Queries) ListAccountInfos(ctx context.Context, arg ListAccountInfosParams) ([]AccountInfo, error) {
	rows, err := q.db.QueryContext(ctx, listAccountInfos, arg.Limit, arg.Offset)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []AccountInfo{}
	for rows.Next() {
		var i AccountInfo
		if err := rows.Scan(
			&i.ID,
			&i.AccountID,
			&i.Name,
			&i.Email,
			&i.PhoneNumber,
			&i.Address,
			&i.CreatedAt,
			&i.UpdatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const updateAccountInfo = `-- name: UpdateAccountInfo :one
UPDATE account_info
SET
  name = $2,
  email = $3,
  phone_number = $4,
  address = $5,
  account_id = $6,
  updated_at = $7
WHERE id = $1
RETURNING id, account_id, name, email, phone_number, address, created_at, updated_at
`

type UpdateAccountInfoParams struct {
	ID          int64     `json:"id"`
	Name        string    `json:"name"`
	Email       string    `json:"email"`
	PhoneNumber string    `json:"phone_number"`
	Address     string    `json:"address"`
	AccountID   int64     `json:"account_id"`
	UpdatedAt   time.Time `json:"updated_at"`
}

func (q *Queries) UpdateAccountInfo(ctx context.Context, arg UpdateAccountInfoParams) (AccountInfo, error) {
	row := q.db.QueryRowContext(ctx, updateAccountInfo,
		arg.ID,
		arg.Name,
		arg.Email,
		arg.PhoneNumber,
		arg.Address,
		arg.AccountID,
		arg.UpdatedAt,
	)
	var i AccountInfo
	err := row.Scan(
		&i.ID,
		&i.AccountID,
		&i.Name,
		&i.Email,
		&i.PhoneNumber,
		&i.Address,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const updateAccountInfoAddress = `-- name: UpdateAccountInfoAddress :exec
UPDATE account_info SET address = $2, updated_at = NOW() WHERE id = $1
`

type UpdateAccountInfoAddressParams struct {
	ID      int64  `json:"id"`
	Address string `json:"address"`
}

func (q *Queries) UpdateAccountInfoAddress(ctx context.Context, arg UpdateAccountInfoAddressParams) error {
	_, err := q.db.ExecContext(ctx, updateAccountInfoAddress, arg.ID, arg.Address)
	return err
}

const updateAccountInfoEmail = `-- name: UpdateAccountInfoEmail :exec
UPDATE account_info SET email = $2, updated_at = NOW() WHERE id = $1
`

type UpdateAccountInfoEmailParams struct {
	ID    int64  `json:"id"`
	Email string `json:"email"`
}

func (q *Queries) UpdateAccountInfoEmail(ctx context.Context, arg UpdateAccountInfoEmailParams) error {
	_, err := q.db.ExecContext(ctx, updateAccountInfoEmail, arg.ID, arg.Email)
	return err
}

const updateAccountInfoName = `-- name: UpdateAccountInfoName :exec
UPDATE account_info SET name = $2, updated_at = NOW() WHERE id = $1
`

type UpdateAccountInfoNameParams struct {
	ID   int64  `json:"id"`
	Name string `json:"name"`
}

func (q *Queries) UpdateAccountInfoName(ctx context.Context, arg UpdateAccountInfoNameParams) error {
	_, err := q.db.ExecContext(ctx, updateAccountInfoName, arg.ID, arg.Name)
	return err
}

const updateAccountInfoPhoneNumber = `-- name: UpdateAccountInfoPhoneNumber :exec
UPDATE account_info SET phone_number = $2, updated_at = NOW() WHERE id = $1
`

type UpdateAccountInfoPhoneNumberParams struct {
	ID          int64  `json:"id"`
	PhoneNumber string `json:"phone_number"`
}

func (q *Queries) UpdateAccountInfoPhoneNumber(ctx context.Context, arg UpdateAccountInfoPhoneNumberParams) error {
	_, err := q.db.ExecContext(ctx, updateAccountInfoPhoneNumber, arg.ID, arg.PhoneNumber)
	return err
}
