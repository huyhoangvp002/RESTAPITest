// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.29.0
// source: account_info.sql

package db

import (
	"context"
	"database/sql"
	"time"
)

const createAccountInfo = `-- name: CreateAccountInfo :one
INSERT INTO account_info (
  name,
  email,
  phone_number,
  address,
  account_id,
  created_at,
  update_at
) VALUES (
  $1, $2, $3, $4, $5, $6, $7
)
RETURNING id, name, email, phone_number, address, account_id, created_at, update_at
`

type CreateAccountInfoParams struct {
	Name        string        `json:"name"`
	Email       string        `json:"email"`
	PhoneNumber string        `json:"phone_number"`
	Address     string        `json:"address"`
	AccountID   sql.NullInt32 `json:"account_id"`
	CreatedAt   time.Time     `json:"created_at"`
	UpdateAt    time.Time     `json:"update_at"`
}

func (q *Queries) CreateAccountInfo(ctx context.Context, arg CreateAccountInfoParams) (AccountInfo, error) {
	row := q.db.QueryRowContext(ctx, createAccountInfo,
		arg.Name,
		arg.Email,
		arg.PhoneNumber,
		arg.Address,
		arg.AccountID,
		arg.CreatedAt,
		arg.UpdateAt,
	)
	var i AccountInfo
	err := row.Scan(
		&i.ID,
		&i.Name,
		&i.Email,
		&i.PhoneNumber,
		&i.Address,
		&i.AccountID,
		&i.CreatedAt,
		&i.UpdateAt,
	)
	return i, err
}

const getAccountInfo = `-- name: GetAccountInfo :one
SELECT id, name, email, phone_number, address, account_id, created_at, update_at FROM account_info
WHERE id = $1
`

func (q *Queries) GetAccountInfo(ctx context.Context, id int64) (AccountInfo, error) {
	row := q.db.QueryRowContext(ctx, getAccountInfo, id)
	var i AccountInfo
	err := row.Scan(
		&i.ID,
		&i.Name,
		&i.Email,
		&i.PhoneNumber,
		&i.Address,
		&i.AccountID,
		&i.CreatedAt,
		&i.UpdateAt,
	)
	return i, err
}

const listAccountInfos = `-- name: ListAccountInfos :many
SELECT id, name, email, phone_number, address, account_id, created_at, update_at FROM account_info
ORDER BY id
LIMIT $1 OFFSET $2
`

type ListAccountInfosParams struct {
	Limit  int32 `json:"limit"`
	Offset int32 `json:"offset"`
}

func (q *Queries) ListAccountInfos(ctx context.Context, arg ListAccountInfosParams) ([]AccountInfo, error) {
	rows, err := q.db.QueryContext(ctx, listAccountInfos, arg.Limit, arg.Offset)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []AccountInfo{}
	for rows.Next() {
		var i AccountInfo
		if err := rows.Scan(
			&i.ID,
			&i.Name,
			&i.Email,
			&i.PhoneNumber,
			&i.Address,
			&i.AccountID,
			&i.CreatedAt,
			&i.UpdateAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const updateAccountInfo = `-- name: UpdateAccountInfo :one
UPDATE account_info
SET
  name = $2,
  email = $3,
  phone_number = $4,
  address = $5,
  account_id = $6,
  update_at = $7
WHERE id = $1
RETURNING id, name, email, phone_number, address, account_id, created_at, update_at
`

type UpdateAccountInfoParams struct {
	ID          int64         `json:"id"`
	Name        string        `json:"name"`
	Email       string        `json:"email"`
	PhoneNumber string        `json:"phone_number"`
	Address     string        `json:"address"`
	AccountID   sql.NullInt32 `json:"account_id"`
	UpdateAt    time.Time     `json:"update_at"`
}

func (q *Queries) UpdateAccountInfo(ctx context.Context, arg UpdateAccountInfoParams) (AccountInfo, error) {
	row := q.db.QueryRowContext(ctx, updateAccountInfo,
		arg.ID,
		arg.Name,
		arg.Email,
		arg.PhoneNumber,
		arg.Address,
		arg.AccountID,
		arg.UpdateAt,
	)
	var i AccountInfo
	err := row.Scan(
		&i.ID,
		&i.Name,
		&i.Email,
		&i.PhoneNumber,
		&i.Address,
		&i.AccountID,
		&i.CreatedAt,
		&i.UpdateAt,
	)
	return i, err
}
