// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.29.0
// source: orders.sql

package db

import (
	"context"
	"time"
)

const createOrder = `-- name: CreateOrder :one
INSERT INTO orders (buyer_id, seller_id, total_price, cod, status, created_at)
VALUES ($1, $2, $3, $4, $5, $6) RETURNING id, buyer_id, seller_id, total_price, cod, status, created_at
`

type CreateOrderParams struct {
	BuyerID    int64     `json:"buyer_id"`
	SellerID   int64     `json:"seller_id"`
	TotalPrice int64     `json:"total_price"`
	Cod        bool      `json:"cod"`
	Status     string    `json:"status"`
	CreatedAt  time.Time `json:"created_at"`
}

func (q *Queries) CreateOrder(ctx context.Context, arg CreateOrderParams) (Order, error) {
	row := q.db.QueryRowContext(ctx, createOrder,
		arg.BuyerID,
		arg.SellerID,
		arg.TotalPrice,
		arg.Cod,
		arg.Status,
		arg.CreatedAt,
	)
	var i Order
	err := row.Scan(
		&i.ID,
		&i.BuyerID,
		&i.SellerID,
		&i.TotalPrice,
		&i.Cod,
		&i.Status,
		&i.CreatedAt,
	)
	return i, err
}

const deleteOrder = `-- name: DeleteOrder :exec
DELETE FROM orders WHERE id = $1
`

func (q *Queries) DeleteOrder(ctx context.Context, id int64) error {
	_, err := q.db.ExecContext(ctx, deleteOrder, id)
	return err
}

const getOrder = `-- name: GetOrder :one
SELECT id, buyer_id, seller_id, total_price, cod, status, created_at FROM orders WHERE id = $1
`

func (q *Queries) GetOrder(ctx context.Context, id int64) (Order, error) {
	row := q.db.QueryRowContext(ctx, getOrder, id)
	var i Order
	err := row.Scan(
		&i.ID,
		&i.BuyerID,
		&i.SellerID,
		&i.TotalPrice,
		&i.Cod,
		&i.Status,
		&i.CreatedAt,
	)
	return i, err
}

const listOrders = `-- name: ListOrders :many
SELECT id, buyer_id, seller_id, total_price, cod, status, created_at FROM orders ORDER BY id LIMIT $1 OFFSET $2
`

type ListOrdersParams struct {
	Limit  int32 `json:"limit"`
	Offset int32 `json:"offset"`
}

func (q *Queries) ListOrders(ctx context.Context, arg ListOrdersParams) ([]Order, error) {
	rows, err := q.db.QueryContext(ctx, listOrders, arg.Limit, arg.Offset)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []Order{}
	for rows.Next() {
		var i Order
		if err := rows.Scan(
			&i.ID,
			&i.BuyerID,
			&i.SellerID,
			&i.TotalPrice,
			&i.Cod,
			&i.Status,
			&i.CreatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const updateOrderStatus = `-- name: UpdateOrderStatus :one
UPDATE orders SET status = $2 WHERE id = $1 RETURNING id, buyer_id, seller_id, total_price, cod, status, created_at
`

type UpdateOrderStatusParams struct {
	ID     int64  `json:"id"`
	Status string `json:"status"`
}

func (q *Queries) UpdateOrderStatus(ctx context.Context, arg UpdateOrderStatusParams) (Order, error) {
	row := q.db.QueryRowContext(ctx, updateOrderStatus, arg.ID, arg.Status)
	var i Order
	err := row.Scan(
		&i.ID,
		&i.BuyerID,
		&i.SellerID,
		&i.TotalPrice,
		&i.Cod,
		&i.Status,
		&i.CreatedAt,
	)
	return i, err
}
