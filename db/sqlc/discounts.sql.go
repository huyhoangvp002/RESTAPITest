// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.29.0
// source: discounts.sql

package db

import (
	"context"
	"database/sql"
)

const createDiscount = `-- name: CreateDiscount :one
INSERT INTO discounts (
  discount_value,
  product_id
) VALUES (
  $1, $2
)
RETURNING id, discount_value, product_id
`

type CreateDiscountParams struct {
	DiscountValue int32         `json:"discount_value"`
	ProductID     sql.NullInt32 `json:"product_id"`
}

func (q *Queries) CreateDiscount(ctx context.Context, arg CreateDiscountParams) (Discount, error) {
	row := q.db.QueryRowContext(ctx, createDiscount, arg.DiscountValue, arg.ProductID)
	var i Discount
	err := row.Scan(&i.ID, &i.DiscountValue, &i.ProductID)
	return i, err
}

const deleteDiscount = `-- name: DeleteDiscount :exec
DELETE FROM discounts
WHERE id = $1
`

func (q *Queries) DeleteDiscount(ctx context.Context, id int64) error {
	_, err := q.db.ExecContext(ctx, deleteDiscount, id)
	return err
}

const getDiscount = `-- name: GetDiscount :one
SELECT
  id,
  discount_value,
  product_id
FROM
  discounts
WHERE
  id = $1
`

func (q *Queries) GetDiscount(ctx context.Context, id int64) (Discount, error) {
	row := q.db.QueryRowContext(ctx, getDiscount, id)
	var i Discount
	err := row.Scan(&i.ID, &i.DiscountValue, &i.ProductID)
	return i, err
}

const listDiscounts = `-- name: ListDiscounts :many
SELECT
  id,
  discount_value,
  product_id
FROM
  discounts
ORDER BY
  id
`

func (q *Queries) ListDiscounts(ctx context.Context) ([]Discount, error) {
	rows, err := q.db.QueryContext(ctx, listDiscounts)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []Discount{}
	for rows.Next() {
		var i Discount
		if err := rows.Scan(&i.ID, &i.DiscountValue, &i.ProductID); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const updateDiscount = `-- name: UpdateDiscount :one
UPDATE discounts
SET
  discount_value = $2,
  product_id = $3
WHERE
  id = $1
RETURNING id, discount_value, product_id
`

type UpdateDiscountParams struct {
	ID            int64         `json:"id"`
	DiscountValue int32         `json:"discount_value"`
	ProductID     sql.NullInt32 `json:"product_id"`
}

func (q *Queries) UpdateDiscount(ctx context.Context, arg UpdateDiscountParams) (Discount, error) {
	row := q.db.QueryRowContext(ctx, updateDiscount, arg.ID, arg.DiscountValue, arg.ProductID)
	var i Discount
	err := row.Scan(&i.ID, &i.DiscountValue, &i.ProductID)
	return i, err
}
