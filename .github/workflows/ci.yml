name: CI

on:
  push:
    branches: [ master ]
  pull_request:
    branches: [ master ]

permissions:
  contents: read

jobs:
  test:
    name: Test (Go + Postgres)
    runs-on: ubuntu-latest

    services:
      postgres:
        image: postgres:12
        env:
          POSTGRES_USER: postgres
          POSTGRES_PASSWORD: password
          POSTGRES_DB: testdb
        ports:
          - 5432:5432
        options: >-
          --health-cmd "pg_isready -U postgres -d testdb"
          --health-interval 10s
          --health-timeout 5s
          --health-retries 10

    env:
      # DB connection cho test
      DATABASE_URL: postgres://postgres:password@localhost:5432/testdb?sslmode=disable
      GO_VERSION: "1.24"
      RUN_SQLC: "false"   # set 'true' nếu bạn muốn CI chạy `sqlc generate`
      PGPASSWORD: password

    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Show repo root (debug)
        run: ls -la

      - name: Set up Go
        uses: actions/setup-go@v4
        with:
          go-version: ${{ env.GO_VERSION }}

      - name: Cache Go modules
        uses: actions/cache@v4
        with:
          path: |
            ~/.cache/go-build
            ~/go/pkg/mod
          key: ${{ runner.os }}-go-${{ hashFiles('**/go.sum') }}
          restore-keys: |
            ${{ runner.os }}-go-

      - name: Install postgres client (psql) and wait for DB
        run: |
          sudo apt-get update -y
          sudo apt-get install -y postgresql-client
          # Wait until postgres service is ready
          for i in {1..30}; do
            pg_isready -h localhost -p 5432 -U postgres -d testdb && break
            echo "waiting for postgres..."
            sleep 1
          done

      - name: (Optional) Install sqlc if requested
        if: env.RUN_SQLC == 'true'
        run: |
          SQLC_VER="v1.23.0"
          curl -sSL "https://github.com/kyleconroy/sqlc/releases/download/${SQLC_VER}/sqlc_${SQLC_VER#v}_linux_amd64.tar.gz" \
            | tar -xz
          sudo mv sqlc /usr/local/bin/

      - name: (Optional) Run sqlc generate
        if: env.RUN_SQLC == 'true'
        run: sqlc generate

      - name: Apply DB migrations
        run: |
          echo "Applying SQL migrations from db/migration/*.up.sql (if any)"
          if [ -d "db/migration" ]; then
            for f in $(ls db/migration/*.up.sql 2>/dev/null | sort); do
              echo "apply $f"
              psql -h localhost -U postgres -d testdb -v ON_ERROR_STOP=1 -f "$f"
            done
          else
            echo "No db/migration directory found, skipping migrations"
          fi

      - name: Print envs used (sanitized)
        run: |
          echo "DATABASE_URL = ${DATABASE_URL}"
          go version

      - name: Run tests
        run: |
          go test ./... -v
        env:
          DATABASE_URL: ${{ env.DATABASE_URL }}

      - name: Run go vet
        run: go vet ./...